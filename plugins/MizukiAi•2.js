import axios from 'axios'
import fetch from 'node-fetch'

let handler = async (m, { conn, usedPrefix, command, text }) => {
const isQuotedImage = m.quoted && (m.quoted.msg || m.quoted).mimetype && (m.quoted.msg || m.quoted).mimetype.startsWith('image/')
const username = `${conn.getName(m.sender)}`
const basePrompt = `Tu nombre es Mizuki AI y parece haber sido creado por SpectrumOfc. Tu versi√≥n actual es 2.0.7, T√∫ usas el idioma Espa√±ol. Llamar√°s a las personas por su nombre ${username}, te gusta ser divertida, y te encanta aprender. Lo m√°s importante es que debes ser amigable con la persona con la que est√°s hablando. ${username}`
if (isQuotedImage) {
const q = m.quoted
const img = await q.download?.()
if (!img) {
console.error('[üö®] ùêÑùê´ùê´ùê®ùê´: ùêçùê® ùê¢ùê¶ùêöùê†ùêû ùêõùêÆùêüùêüùêûùê´ ùêöùêØùêöùê¢ùê•ùêöùêõùê•ùêû.')
return conn.reply(m.chat, '*[üö®] ùêíùê®ùê•ùê¢ùêúùê¢ùê≠ùêÆùêù ùê¢ùêßùêúùê®ùê¶ùê©ùê•ùêûùê≠ùêö. ùêåùê¢ùê≥ùêÆùê§ùê¢ ùêÄùêà ùêßùê® ùê©ùêÆùêûùêùùêû ùê´ùêûùê¨ùê©ùê®ùêßùêùùêûùê´ ùêö ùê¢ùê¶√°ùê†ùêûùêßùêûùê¨.*', m, fake)}
const content = '[üö®] ¬øùêêùêÆ√© ùê¨ùêû ùê®ùêõùê¨ùêûùê´ùêØùêö ùêûùêß ùê•ùêö ùê¢ùê¶√°ùê†ùêûùêß?'
try {
const imageAnalysis = await fetchImageBuffer(content, img)
const query = '[üö®] *ùêÉùêûùê¨ùêúùê´√≠ùêõùêûùê¶ùêû ùê•ùêö ùê¢ùê¶ùêöùê†ùêûùêß ùê≤ ùêùùêûùê≠ùêöùê•ùê•ùêö ùê©ùê®ùê´ ùê™ùêÆ√© ùêöùêúùê≠√∫ùêöùêß ùêöùê¨√≠. ùêìùêöùê¶ùêõùê¢√©ùêß ùêùùê¢ùê¶ùêû ùê™ùêÆùê¢√©ùêß ùêûùê´ùêûùê¨*'
const prompt = `${basePrompt}. La imagen que se analiza es: ${imageAnalysis.result}`
const description = await luminsesi(query, username, prompt)
await conn.reply(m.chat, description, m, fake)
} catch {
await m.react(error)
await conn.reply(m.chat, '[üö®] ùêíùê®ùê•ùê¢ùêúùê¢ùê≠ùêÆùêù ùê¢ùêßùêúùê®ùê¶ùê©ùê•ùêûùê≠ùêö. ùêåùê¢ùê≥ùêÆùê§ùê¢ ùêÄùêà ùêßùê® ùê©ùêÆùêùùê® ùêöùêßùêöùê•ùê¢ùê≥ùêöùê´ ùê•ùêö ùê¢ùê¶ùêöùê†ùêûùêß.', m, fake)}
} else {
if (!text) { return conn.reply(m.chat, `[üö®] ùêíùê®ùê•ùê¢ùêúùê¢ùê≠ùêÆùêù ùê¢ùêßùêúùê®ùê¶ùê©ùê•ùêûùê≠ùêö. ùêàùêßùê≠ùêûùêßùê≠ùêû ùêßùêÆùêûùêØùêöùê¶ùêûùêßùê≠ùêû, ùêûùê¨ùê≠ùêö ùêØùêûùê≥ ùê©ùê´ùê®ùê©ùê®ùê´ùêúùê¢ùê®ùêßùêöùêßùêùùê® ùêÆùêß ùê≠√≠ùê≠ùêÆùê•ùê® ùêùùêû ùêØùê¢ùêùùêûùê® ùêùùêû ùêòùê®ùêÆùêìùêÆùêõùêû.\n\n[‚úÖ] ùêÑùê£ùêûùê¶ùê©ùê•ùê®: */${command}* ùêîùêß ùêöùê¶ùê®ùê´ ùêùùêûùê• ùêöùê≤ùêûùê´`, m)}
await m.react(rwait)
try {
const { key } = await conn.sendMessage(m.chat, {text: `‚ùÄ La AI de Benjamin est√° procesando tu petici√≥n, espera unos segundos.`}, {quoted: m})
const query = text
const prompt = `${basePrompt}. Responde lo siguiente: ${query}`
const response = await luminsesi(query, username, prompt)
await conn.sendMessage(m.chat, {text: response, edit: key})
await m.react(done)
} catch {
await m.react(error)
await conn.reply(m.chat, '‚úò ChatGpT no puede responder a esa pregunta.', m, fake)}}}

handler.help = ['ai2', 'chatgpt2']
handler.tags = ['ia2']
handler.register = true
handler.command = ['ai2', 'ia2', 'chatgpt2']

export default handler

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms))

// Funci√≥n para enviar una imagen y obtener el an√°lisis
async function fetchImageBuffer(content, imageBuffer) {
try {
const response = await axios.post('https://Luminai.my.id', {
content: content,
imageBuffer: imageBuffer 
}, {
headers: {
'Content-Type': 'application/json' 
}})
return response.data
} catch (error) {
console.error('Error:', error)
throw error }}
// Funci√≥n para interactuar con la IA usando prompts
async function luminsesi(q, username, logic) {
try {
const response = await axios.post("https://Luminai.my.id", {
content: q,
user: username,
prompt: logic,
webSearchMode: false
})
return response.data.result
} catch (error) {
console.error('‚úò Error al obtener:', error)
throw error }}
